{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\judel\\\\Project Repositories\\\\fullstack-todo-list\\\\frontend\\\\src\\\\components\\\\ListForm.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useTasksContext } from '../hooks/useTasksContext.js';\nimport { useAuthContext } from '../hooks/useAuthContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListForm = () => {\n  _s();\n  const URL = process.env.REACT_APP_API_URL;\n  const [description, setDescription] = useState(\"\");\n  const [error, setError] = useState(null);\n  const {\n    dispatch\n  } = useTasksContext();\n  const {\n    user\n  } = useAuthContext();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!user) {\n      setError(\"You must be logged in\");\n      return;\n    }\n    const completed = false;\n    const task = {\n      completed,\n      description\n    };\n    const response = await fetch(`${URL}/api/tasks`, {\n      method: \"POST\",\n      body: JSON.stringify(task),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${user.token}`\n      }\n    });\n    const json = await response.json();\n    if (!response.ok) {\n      setError(json.error);\n    } else {\n      dispatch({\n        type: \"CREATE_TASK\",\n        payload: json\n      });\n      setDescription(\"\");\n      console.log(\"new task added\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"list-form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter your task here...\",\n          onChange: e => setDescription(e.target.value),\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"material-symbols-outlined\",\n          id: \"addButton\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-div\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(ListForm, \"NdsiX1zRiPdnQTJwx6Ap8NCE40w=\", false, function () {\n  return [useTasksContext, useAuthContext];\n});\n_c = ListForm;\nexport default ListForm;\nvar _c;\n$RefreshReg$(_c, \"ListForm\");","map":{"version":3,"names":["useState","useTasksContext","useAuthContext","jsxDEV","_jsxDEV","ListForm","_s","URL","process","env","REACT_APP_API_URL","description","setDescription","error","setError","dispatch","user","handleSubmit","e","preventDefault","completed","task","response","fetch","method","body","JSON","stringify","headers","token","json","ok","type","payload","console","log","children","onSubmit","className","placeholder","onChange","target","value","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/judel/Project Repositories/fullstack-todo-list/frontend/src/components/ListForm.jsx"],"sourcesContent":["import {useState} from 'react'\r\nimport {useTasksContext} from '../hooks/useTasksContext.js'\r\nimport { useAuthContext } from '../hooks/useAuthContext.js'\r\nconst ListForm = () => {\r\n    const URL = process.env.REACT_APP_API_URL\r\n    const [description, setDescription] = useState(\"\")\r\n    const [error, setError] = useState(null)\r\n    const { dispatch } = useTasksContext()\r\n    const {user} = useAuthContext()\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        if (!user){\r\n            setError(\"You must be logged in\")\r\n            return\r\n        }\r\n        const completed = false\r\n        const task = {completed, description}\r\n        const response = await fetch(`${URL}/api/tasks`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(task),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${user.token}`\r\n            }\r\n        })\r\n        const json = await response.json()\r\n\r\n        if(!response.ok){\r\n            setError(json.error)\r\n        } else {\r\n            dispatch({type: \"CREATE_TASK\",payload: json})\r\n            setDescription(\"\")\r\n            console.log(\"new task added\")\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <form onSubmit = {handleSubmit} className = \"list-form\">\r\n            <div className=\"form-row\">\r\n                {/* <input type = \"checkbox\" onChange = {(e) => setCompleted(e.target.value)} /> */}\r\n                <input placeholder = \"Enter your task here...\" \r\n                    onChange = {(e) => setDescription(e.target.value)}\r\n                    value = {description}\r\n                />\r\n                <button className = \"material-symbols-outlined\" id=\"addButton\">add</button>\r\n            </div>\r\n            \r\n        </form>\r\n        {error && <div className=\"error-div\">{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListForm\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}